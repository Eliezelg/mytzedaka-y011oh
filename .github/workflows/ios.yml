name: iOS Build and Deploy
on:
  push:
    branches: [ main ]
    paths:
      - 'src/ios/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/ios/**'

env:
  DEVELOPER_APP_ID: ${{ secrets.APPLE_DEVELOPER_APP_ID }}
  DEVELOPER_APP_IDENTIFIER: ${{ secrets.APPLE_DEVELOPER_APP_IDENTIFIER }}
  PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}
  TEMP_KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }}
  APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
  MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  APPSTORE_CONNECT_API_KEY: ${{ secrets.APPSTORE_CONNECT_API_KEY }}
  CERTIFICATE_PRIVATE_KEY: ${{ secrets.CERTIFICATE_PRIVATE_KEY }}
  FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
  FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
  MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
  WORKSPACE: "IJAP.xcworkspace"
  SCHEME: "IJAP"

jobs:
  build-test:
    name: Build and Test
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Ruby environment
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '3.0'
          
      - name: Cache Ruby gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Cache Pods
        uses: actions/cache@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Create Temporary Keychain
        run: |
          security create-keychain -p "$TEMP_KEYCHAIN_PASSWORD" build.keychain
          security list-keychains -d user -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$TEMP_KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 3600 build.keychain

      - name: Install dependencies
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          bundle exec pod install

      - name: Setup Provisioning Profiles
        uses: apple-actions/download-provisioning-profiles@v1
        with:
          bundle-id: ${{ env.DEVELOPER_APP_IDENTIFIER }}
          profile-type: 'IOS_APP_STORE'
          issuer-id: ${{ secrets.APPSTORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_CONNECT_API_KEY }}

      - name: Run Tests
        run: |
          bundle exec fastlane test
        env:
          MATCH_KEYCHAIN_NAME: build.keychain
          MATCH_KEYCHAIN_PASSWORD: ${{ env.TEMP_KEYCHAIN_PASSWORD }}

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: build/test_output

      - name: Clean up certificates
        if: always()
        run: |
          security delete-keychain build.keychain

  deploy-testflight:
    name: Deploy to TestFlight
    needs: build-test
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Ruby environment
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '3.0'

      - name: Install dependencies
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          bundle exec pod install

      - name: Setup Certificates
        run: |
          security create-keychain -p "$TEMP_KEYCHAIN_PASSWORD" build.keychain
          security list-keychains -d user -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$TEMP_KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 3600 build.keychain
          bundle exec fastlane setup_certificates

      - name: Deploy to TestFlight
        run: bundle exec fastlane beta
        env:
          MATCH_KEYCHAIN_NAME: build.keychain
          MATCH_KEYCHAIN_PASSWORD: ${{ env.TEMP_KEYCHAIN_PASSWORD }}

      - name: Clean up certificates
        if: always()
        run: security delete-keychain build.keychain

  deploy-appstore:
    name: Deploy to App Store
    needs: deploy-testflight
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Ruby environment
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '3.0'

      - name: Install dependencies
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          bundle exec pod install

      - name: Setup Certificates
        run: |
          security create-keychain -p "$TEMP_KEYCHAIN_PASSWORD" build.keychain
          security list-keychains -d user -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$TEMP_KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 3600 build.keychain
          bundle exec fastlane setup_certificates

      - name: Deploy to App Store
        run: bundle exec fastlane release
        env:
          MATCH_KEYCHAIN_NAME: build.keychain
          MATCH_KEYCHAIN_PASSWORD: ${{ env.TEMP_KEYCHAIN_PASSWORD }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Clean up certificates
        if: always()
        run: security delete-keychain build.keychain